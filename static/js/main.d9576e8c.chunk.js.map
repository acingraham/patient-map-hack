{"version":3,"sources":["MapChart.js","index.js"],"names":["colorScale","scaleQuantize","domain","range","dataMap","MapChart","useState","data","setData","generateData","i","item","id","Math","floor","random","visited","dataArray","push","useEffect","setInterval","projection","geography","geographies","map","geo","cur","find","s","properties","ZIP","key","rsmKey","fill","rootElement","document","getElementById","ReactDOM","render"],"mappings":"yNAMMA,EAAaC,cAChBC,OAAO,CAAC,EAAG,KACXC,MAAM,CACL,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,YAWEC,EAAU,GAwDDC,EAtDE,WAAO,IAAD,EACGC,mBAAS,IADZ,mBACdC,EADc,KACRC,EADQ,KAGfC,EAAe,WACnB,IAAK,IAAIC,EAAI,EAAGA,EAAI,IAAKA,IAAK,CAC5B,IAAMC,EAdH,CACLC,GAAG,GAAD,OAAKC,KAAKC,MAAsB,GAAhBD,KAAKE,WAArB,OAAsCF,KAAKC,MAAsB,GAAhBD,KAAKE,WAAtD,OAAuEF,KAAKC,MAAsB,GAAhBD,KAAKE,WACzFC,QAASH,KAAKC,MAAsB,EAAhBD,KAAKE,WAavBX,EAAQO,EAAKC,IAAMD,EAAKK,SAAWZ,EAAQO,EAAKC,KAAO,GAGzD,IAAMK,EAAY,GAClB,IAAK,IAAML,KAAMR,EACfa,EAAUC,KAAK,CACbN,KACAI,QAASZ,EAAQQ,KAGrBJ,EAAQS,IAgBV,OAbAE,qBAAU,WAQRV,IACAW,YAAYX,EAAc,OAEzB,IAGD,oCACE,kBAAC,gBAAD,CAAeY,WAAW,gBACxB,kBAAC,cAAD,CAAaC,UA/DN,oCAgEJ,qBAAGC,YACUC,KAAI,SAAAC,GACd,IAAMC,EAAMnB,EAAKoB,MAAK,SAAAC,GAAC,OAAIA,EAAEhB,KAAOa,EAAII,WAAWC,OACnD,OACE,kBAAC,YAAD,CACEC,IAAKN,EAAIO,OACTV,UAAWG,EACXQ,KAAMjC,EAAW0B,EAAMA,EAAIV,QAAU,cC3DvD,IAAMkB,EAAcC,SAASC,eAAe,QAC5CC,IAASC,OAAO,mBAVhB,WACE,OACE,6BACE,oDACA,kBAAC,EAAD,SAMU,MAASJ,I","file":"static/js/main.d9576e8c.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { ComposableMap, Geographies, Geography } from \"react-simple-maps\";\nimport { scaleQuantize } from \"d3-scale\";\n\nconst geoUrl = \"patient-map-hack/zip3.topo.json\";\n\nconst colorScale = scaleQuantize()\n  .domain([1, 10])\n  .range([\n    \"#ffffff\",\n    \"#eeeefb\",\n    \"#dcdcf8\",\n    \"#cbcbf4\",\n    \"#b9b9f1\",\n    \"#a8a8ed\",\n    \"#9697e9\",\n    \"#8585e6\",\n    \"#7374e2\",\n    \"#6262df\",\n    \"#5051db\"\n  ]);\n\nconst getRandomItem = () => {\n  return {\n    id: `${Math.floor(Math.random() * 10)}${Math.floor(Math.random() * 10)}${Math.floor(Math.random() * 10)}`,\n    visited: Math.floor(Math.random() * 5),\n  };\n};\n\n\nconst dataMap = {}\n\nconst MapChart = () => {\n  const [data, setData] = useState([]);\n\n  const generateData = () => {\n    for (let i = 0; i < 500; i++) {\n      const item = getRandomItem();\n      dataMap[item.id] = item.visited + (dataMap[item.id] || 0);\n    }\n\n    const dataArray = [];\n    for (const id in dataMap) {\n      dataArray.push({\n        id,\n        visited: dataMap[id],\n      });\n    }\n    setData(dataArray);\n  };\n\n  useEffect(() => {\n    // https://www.bls.gov/lau/\n    /*\n    csv(\"/unemployment-by-county-2017.csv\").then(counties => {\n      setData(counties);\n    });\n    */\n\n    generateData();\n    setInterval(generateData, 3000);\n\n  }, []);\n\n  return (\n    <>\n      <ComposableMap projection=\"geoAlbersUsa\">\n        <Geographies geography={geoUrl}>\n          {({ geographies }) =>\n            geographies.map(geo => {\n              const cur = data.find(s => s.id === geo.properties.ZIP);\n              return (\n                <Geography\n                  key={geo.rsmKey}\n                  geography={geo}\n                  fill={colorScale(cur ? cur.visited : 0)}\n                />\n              );\n            })\n          }\n        </Geographies>\n      </ComposableMap>\n    </>\n  );\n};\n\nexport default MapChart;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport \"./styles.css\";\n\nimport MapChart from \"./MapChart\";\n\nfunction App() {\n  return (\n    <div>\n      <h2>The Flatiron Network</h2>\n      <MapChart />\n    </div>\n  );\n}\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(<App />, rootElement);\n"],"sourceRoot":""}